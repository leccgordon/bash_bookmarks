# Bookmarks version 0.12
# 
# Copyright (c) 2016,2017 Colin Gordon
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# To set up bookmarks, type '. bm.env init' (without the quotes).
# The shell functions bm() & bma() are created to access bookmark functionality.

if [[ ${1} = init ]]; then
	# ---------------------------------------------------------------------
	# this section sets up shell functions bm & bma when sourcing this file
	# ---------------------------------------------------------------------

	# unalias bma & bm in case already set
	unalias bma bm 2>/dev/null

	# Eval shell function bm() to determine $bm_env
	eval "
	bm() {
		local rv resp
		local bm_env=\"$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/$(basename "${BASH_SOURCE[0]}")\"
		local stdoutdest=notty
		[[ -t 1 ]] && stdoutdest=tty
		while read resp; do
			[[ \${resp} = DIR:*   ]] && cd \"\${resp#DIR:}\"
			[[ \${resp} = BMLOC:* ]] && export BMLOC=\"\${resp#BMLOC:}\"
			[[ \${resp} = TEXT:*  ]] && echo \"\${resp#TEXT:}\"
			[[ \${resp} = MSG:*   ]] && echo \"\${resp#MSG:}\" >&2
			[[ \${resp} = RV:*    ]] && rv=\"\${resp#RV:}\"
		done < <( bash \${bm_env} \${stdoutdest} \"\${@}\" )
		return \${rv}
	}
	"

	bma() {
		bm add "${@}"
	}

	# stop sourcing here. This ensures only bm() & bma() are added to current command-line shell.
	# Line 1 contains Bookmarks version number
	sed -n "1,1s/^# \(.*\)/\1 initialized/p" ${BASH_SOURCE[0]}
	echo "Type 'bm help' for help"
	return
elif [[ ${1} != tty && ${1} != notty ]]; then
	echo
	echo "  To install bookmarks: '. $(basename ${BASH_SOURCE[0]}) init' (excluding quotes)"
	echo
	return
fi

# -------------------------------------------------------------
# global variables
# -------------------------------------------------------------
global_stdoutdest=
global_version=$(sed -n "1,1s/^# \(.*\)/\1/p" ${BASH_SOURCE[0]})
global_stdin=/dev/tty
global_stdout=/dev/tty
global_enable_date_date=Y

# If set, output these values on exit
global_out_DIR=
global_out_BMLOC=
global_out_msg_arr=( )
global_out_file_arr=( )


# -------------------------------------------------------------
# on-exit
# -------------------------------------------------------------
output_return_data() {
	local rv="${1}"
	local i
	[[ -n ${global_out_DIR}   ]] && echo "DIR:${global_out_DIR}"
	[[ -n ${global_out_BMLOC} ]] && echo "BMLOC:${global_out_BMLOC}"
	for (( i=0; i<${#global_out_msg_arr[@]}; i++ )); do
		echo "MSG:${global_out_msg_arr[i]}"
	done
	for (( i=0; i<${#global_out_file_arr[@]}; i++ )); do
		echo "TEXT:${global_out_file_arr[i]}"
	done
	echo "RV:${rv}"
}


onexit() {
	local rv="${1}"
	output_return_data ${rv}

	# Close file descriptors
	exec 10<&-
	exec 11>&-

	exit ${rv}
}
trap 'onexit $?' EXIT


# -------------------------------------------------------------
# report warnings & errors
# -------------------------------------------------------------
msg() {
# output $1 if stdout is terminal
	global_out_msg_arr+=("${1//\\/\\\\}")
}
err() {
	msg "ERROR:${1}"
}
debug() {
	msg "DEBUG:[$SECONDS]:${1}"
}


# -------------------------------------------------------------
# help
# -------------------------------------------------------------
get_help_text() {
		cat <<!

  Environment:
    ${global_version}
    Bash Version ${BASH_VERSION}
    BMLOC="${BMLOC}"
    |BMLOC defaults to ~/.bookmark if not set

  Command line:
    bm			: show current group bookmarks and pick item
    bma			: add current directory to bookmarks
    bma file		: add full path of file to bookmarks
    bma dir		: add full path of dir to bookmarks
    bma *.txt		: add files matching *.txt to bookmarks
    bma group eg1	: create group "eg1" (within current group)
    |group name cannot contain the following 3 characters ":@!"

  Item:
    1			: select item 1; edit, cd or set group accordingly
    1-10		: edit all files within items 1-10
    dir 2		: cd to directory containing item 2
    raw 3               : when stdout redirected, list item 3 without replacing spaces with [[.space.]]
    root		: set to root group and display
    /str		: list items matching "str" in all group sections
    /group		: list all group sections
    edit		: edit bookmarks file
    config              : edit config (~/.bookmark.cfg)
    |item can be parameter eg "bm 1-5", "bm raw 3", "bm /myfile", "bm edit"
    |if stdout redirected, filenames are output eg "bm >files.txt"

  Bookmark file:
    rem			: ignore line
    print text		: print text
    head text           : print section heading
    run command		: execute command when selected
    bmloc filename	: open bookmark file filename when selected
    ==group eg1		: start of group "eg1" block
    ==end-group eg1	: end of group "eg1" block
    |directives must start on first character of line
    |bookmark may be specified as wildcard eg "/full/path/*.txt"

!
}


# -------------------------------------------------------------
# Display handling
# -------------------------------------------------------------
global_prompt_echo=N
prompt() {
	printf "${1}"
	read ${2}
	[[ ${global_prompt_echo} = Y ]] && echo "${!2}"
}

wait_key() {
	local s
	{
	if [[ ${interactive} = Y ]]; then
		prompt "Press Return to continue" s
	fi
	} <&10 >&11
}

global_enable_clear=
bm_clear() {
	[[ ${global_enable_clear} = Y ]] && clear
}

global_editor=
bm_editor() {
	local files="$@"
	${global_editor:-vi} "${@}"
}

# ------------------------------------------------------------
# BMLOC environment variable get/set
# ------------------------------------------------------------
# BMLOC is in form "log:apache@/etc/common_bookmark!xymon@~/.bookmark"

get_BMLOC() {
	echo "${BMLOC:-${HOME}/.bookmark}"
}

set_BMLOC() {
	BMLOC="${1}"
	global_out_BMLOC="${BMLOC}"
}

get_active_bmloc() {
	# left-most entry in exclamation-delimited list is active
	local bmloc_list=$(get_BMLOC)
	echo "${bmloc_list%%!*}"
}

get_top_bmloc_file() {
	# right-most entry in exclamation-delimited list is top-level bookmark file
	local bmloc_list=$(get_BMLOC)
	local top_bmloc="${bmloc_list##*!}"
	echo "${top_bmloc#*@}"
}

get_bmloc_file() {
	# text after @ is full path to bookmark file
	local bmloc=$(get_active_bmloc)
	echo "${bmloc#*@}"
}

get_bmloc_group() {
	# text before @ is current bmgroup
	local bmgroup=$(get_active_bmloc)
	if [[ ${bmgroup} = *@* ]]; then
		bmgroup="${bmgroup%@*}"
		echo "${bmgroup}"
	else
		echo ""
	fi
}

get_previous_bmloc() {
	local full_bmloc=$(get_BMLOC)
	local prev_bmloc
	if [[ ${full_bmloc} = *!* ]]; then
		prev_bmloc="${full_bmloc#*!}"
		prev_bmloc="${prev_bmloc%%!*}"
		echo "${prev_bmloc}"
	else
		echo ""
	fi
}

set_bmloc_group() {
	local newgroup="${1}"
	local bmloc_list=$(get_BMLOC)
	local bmloc=$(get_active_bmloc)
	if [[ -n ${newgroup} ]]; then
		bmloc="${newgroup}@${bmloc#*@}"
	else
		bmloc="${bmloc#*@}"
	fi
	if [[ ${bmloc_list} = *!* ]]; then	
		set_BMLOC "${bmloc}!${bmloc_list#*!}"
	else
		set_BMLOC "${bmloc}"
	fi
}

push_bmloc() {
	local s="${1}"
	if [[ ${s} = *!* ]]; then
		s="${s//!/[[.exclamation-mark.]]}"
	fi
	set_BMLOC "${1}!$(get_BMLOC)"
}

pop_bmloc() {
	local popval="${BMLOC%%!*}"
	set_BMLOC "${BMLOC#*!}"
}

touch_bmloc() {
	local bmloc=$(get_bmloc_file)
	if [[ ! -e ${bmloc} ]]; then
		if ! touch ${bmloc}; then
			err "Cannot create ${bmloc}"
			exit 1
		fi
	fi
}


# ------------------------------------------------------------
# directory control
# ------------------------------------------------------------
set_directory() {
	global_out_DIR="${1}"
}


# ------------------------------------------------------------
# add bookmark / bookmark group
# ------------------------------------------------------------
bma_group() {
	local bmloc=$(get_bmloc_file)
	local bmgroup=$(get_bmloc_group)

	read_config
	touch_bmloc

	if [[ "${1}" = *[@:!]* ]]; then
		err "Group name cannot contain following character [@:!]"
		exit 1
	fi

	local newgroup="${bmgroup}${bmgroup:+:}${1}"

	if grep "^==group ${newgroup}$" ${bmloc}; then
		err "Group \"${newgroup}\" already exists"
		exit 1
	fi

	# Add new group to current bookmark file
	local line="rem -"
	local grp="group ${newgroup}"
	while (( ${#line} < ${#grp}+2 )); do
		line+="-"
	done

	if ! printf "\n\n${line}\n==${grp}\n${line}\n==end-${grp}\n" >>${bmloc}; then
		err "Failed to add ${grp} to ${bmloc}"
		exit 1
	fi
	msg "Group ${newgroup} added"
	msg

	set_bmloc_group "${newgroup}"
	return 0
}


bma_files() {
	local bmloc=$(get_bmloc_file)
	local bmgroup=$(get_bmloc_group)
	local fname="${1:-${PWD}}"
	local c1 c2
	local save_arr
	local var_arr
	local bm_arr=( )

	read_config
	touch_bmloc

	[[ ${fname} != */* ]] && fname="${PWD}/${fname}"

	if [[ ${fname} != /* ]]; then
		if ! cd ${fname%/*} 2>/dev/null; then
			err "Cannot cd to ${fname%/*}"
			exit 1
		fi
		fname="${PWD%/}/${fname##*/}"
		if ! cd ${OLDPWD}; then
			err "Cannot cd to ${OLDPWD}"
			exit 1
		fi
	fi

	# Process identity
	preprocess_bookmark_file bma "${bmloc}"
	local identity=$(context_var_get current.identity)
	if [[ -n ${identity} ]]; then
		local basedir=$(context_var_get config.basedir.${identity})
		if [[ -n ${basedir} ]]; then
			if [[ ${fname} = ${basedir}/* ]]; then
				fname="%{config.basedir.${identity}}${fname#${basedir}}"
			elif [[ ${fname} = ${basedir} ]]; then
				fname="%{config.basedir.${identity}}"
			fi
		fi
	fi

	# Append $fname to end of current group (if exists)
	c1=$(cksum <${bmloc})
	[[ -n ${bmgroup} ]] && sed -i "/^==end-group ${bmgroup}$/i${fname}" ${bmloc}
	c2=$(cksum <${bmloc})

	# If not added to group, append bookmark to end of bookmark file
	if [[ "${c1}" = "${c2}" ]]; then
		if ! echo ${fname} >>${bmloc}; then
			err "Failed to add bookmark ${fname} to ${bmloc}"
			exit 1
		fi
	fi

	# Process next file/dir on list
	shift
	[[ $# -gt 0 ]] && bma_files "$@"
	return 0
}


# ------------------------------------------------------------
# bookmark config & variables
# ------------------------------------------------------------
global_config_vars=("")
global_bookmark_config=~/.bookmark.cfg
global_enable_run=

configvar_set() {
	local name="${1}"
	local value="${2}"
	local i

	if [[ ${global_config_vars[0]} = *:${name}=* ]]; then
		i=${global_config_vars[0]##*:${name}=}
		i=${i%%:*}
		global_config_vars[$i]="${value}"
		return
	fi

	local cnt=${#global_config_vars[@]}
	global_config_vars[0]+=":${name}=${cnt}:"
	global_config_vars[$cnt]="${value}"
}

configvar_get() {
	local name="${1}"
	local default="${2}"
	local i

	if [[ ${global_config_vars[0]} = *:${name}=* ]]; then
		i=${global_config_vars[0]##*:${name}=}
		i=${i%%:*}
		echo "${global_config_vars[i]}"
		return
	fi
	echo "${default}"
}

read_config() {
	local txt
	local n v
	global_config_vars=("")
	configvar_set "config.enable_run"   "N"
	configvar_set "config.enable_clear" "Y"
	configvar_set "config.editor"       "vi"
	v=N
	if date --date today >/dev/null 2>/dev/null; then
		v=Y
	fi
	configvar_set "internal.date--date" "${v}"
	if [[ -r ${global_bookmark_config} ]]; then
		while read -r txt; do
			[[ ${txt} = \#* ]] && continue
			if [[ "${txt}" = *=* ]]; then
				n="config.${txt%%=*}"
				v="${txt#*=}"
				configvar_set "${n}" "${v}"
			fi
		done < ${global_bookmark_config}
	fi
	global_enable_clear=$(configvar_get config.enable_clear)
	global_enable_run=$(configvar_get config.enable_run)
	global_editor=$(configvar_get config.editor)
	global_stdin=$(configvar_get config.stdin ${global_stdin})
	global_stdout=$(configvar_get config.stdout ${global_stdout})
	global_prompt_echo=$(configvar_get config.prompt_echo ${global_prompt_echo})
	global_enable_date_date=$(configvar_get config.enable_date--date ${global_enable_date_date})

	if [[ ${global_enable_date_date} = N ]]; then
		configvar_set "internal.date--date" "N"
	fi

	# Do not re-open &10 and &11
	if { >&11; } 2>/dev/null; then
		:
	else
		exec 10< ${global_stdin}
		exec 11> ${global_stdout}
	fi
}

prepare_config_file() {
	if [[ ! -r ${global_bookmark_config} ]]; then
		local str="${global_config_vars[0]}"
		local name
		str=${str#:}
		while [[ -n ${str} ]]; do
			name=${str%%=*}
			if [[ ${name} = config.* ]]; then
				echo "${name#config\.}=$(configvar_get ${name})"
			fi
			str=${str#.*:}
		done >${global_bookmark_config}
	fi
}


global_context_vars=("")
context_var_get() {
	local name="${1}"
	local i

	if [[ ${global_context_vars[0]} = *:${name}=* ]]; then
		i=${global_context_vars[0]##*:${name}=}
		i=${i%%:*}
		echo "${global_context_vars[i]}"
	fi
}


init_vars() {
	var_arr=("${global_config_vars[@]}")
	global_context_vars=("")
}


global_line_output=
var_set() {
	local name="${1}"
	local value="${2}"
	local i

	# Ignore write in config namespace except from ${global_bookmark_config}
	if [[ ${name} = config\.* ]]; then
		return
	fi

	for i in ":" "="; do
		if [[ "${name}" = *${i}* ]]; then
			print_error "Invalid character '${i}' in variable name"
			return
		fi
	done

	if [[ ${name} = "." ]]; then
		global_line_output="${value}"
		return
	fi

	if [[ ${var_arr[0]} = *:${name}=* ]]; then
		i=${var_arr[0]##*:${name}=}
		i=${i%%:*}
		var_arr[$i]="${value}"
		return
	fi

	local cnt=${#var_arr[@]}
	var_arr[0]+=":${name}=${cnt}:"
	var_arr[$cnt]="${value}"
}


var_get() {
	local name="${1}"
	local i

	if [[ ${var_arr[0]} = *:${name}=* ]]; then
		i=${var_arr[0]##*:${name}=}
		i=${i%%:*}
		echo "${var_arr[i]}"
	fi
}


# ------------------------------------------------------------
# general
# ------------------------------------------------------------
# Convert $1 to use bash collation chars
to_collation_chars() {
	local s="${1}"
	
	# Use tilde-encoding to simplify square-bracket substitution
	s="${s//\~/~t}"
	s="${s//\[/~o}"
	s="${s//\]/~c}"

	# Translate tilde-encoded chars to correct collation symbols
	s="${s//\~c/[[.right-square-bracket.]]}"
	s="${s//\~o/[[.left-square-bracket.]]}"
	s="${s//\~t/[[.tilde.]]}"

	s="${s// /[[.space.]]}"
	s="${s//!/[[.exclamation-mark.]]}"
	s="${s//\"/[[.quotation-mark.]]}"
	s="${s//#/[[.number-sign.]]}"
	s="${s//\$/[[.dollar-sign.]]}"
	s="${s//%/[[.percent-sign.]]}"
	s="${s//\&/[[.ampersand.]]}"
	s="${s//\'/[[.apostrophe.]]}"
	s="${s//(/[[.left-parenthesis.]]}"
	s="${s//)/[[.right-parenthesis.]]}"
	s="${s//\*/[[.asterisk.]]}"
	s="${s//+/[[.plus-sign.]]}"
	s="${s//:/[[.colon.]]}"
	s="${s//;/[[.semicolon.]]}"
	s="${s//</[[.less-than-sign.]]}"
	s="${s//=/[[.equals-sign.]]}"
	s="${s//>/[[.greater-than-sign.]]}"
	s="${s//\?/[[.question-mark.]]}"
	s="${s//@/[[.commercial-at.]]}"
	s="${s//\\/[[.backslash.]]}"
	s="${s//^/[[.circumflex.]]}"
	s="${s//\`/[[.grave-accent.]]}"
	s="${s//\{/[[.left-brace.]]}"
	s="${s//\|/[[.vertical-line.]]}"
	s="${s//\}/[[.right-brace.]]}"
	echo "${s}"
}


# ------------------------------------------------------------
# token handler
# ------------------------------------------------------------
global_token_idx=0
global_last_token=0
global_currtoken=""
global_match_first=1
global_parse_arr=( )

# Return 0 if odd number of backslashes at end of string, otherwise 1
str_ends_with_backslash() {
	local i=$((${#1}-1))
	while [[ ${1:$i:1} = \\ ]]; do
		((i-=1))
	done
	return $(( (${#1}-i)%2 ))
}

token_init() {
	local txt="${1}"
	global_token_idx=0
	global_last_token=0
	global_currtoken=""
	global_match_first=1
	global_parse_arr=( )
	while [[ "${txt}" = *\ * ]]; do
		global_parse_arr+=("${txt%% *}")
		txt="${txt#* }"
	done
	global_parse_arr+=("${txt}")
}

token_next() {
	local token_prefix="$1"
	((global_token_idx+=1))

	# if no token prefix, skip multiple spaces between tokens
	if [[ -z ${token_prefix} ]]; then
		while [[ ${global_token_idx} -lt ${#global_parse_arr[@]} && ${global_parse_arr[global_token_idx]} = "" ]]; do
			((global_token_idx+=1))
		done
	fi

	# Does this token end in an odd number of "\"?
	# If so, get next token prefixed with this token (minus the trailing \)
	if str_ends_with_backslash "${global_parse_arr[global_token_idx]}"; then
		token_next "${token_prefix}${global_parse_arr[global_token_idx]%\\} "
		return
	fi

	if (( ${global_token_idx} == ${#global_parse_arr[@]}-1 )); then
		global_last_token=1
	fi
	global_curr_token="${token_prefix}${global_parse_arr[global_token_idx]}"
}

tokens_to_end() {
	local i
	global_curr_token=""
	for((i=global_token_idx+1; i<${#global_parse_arr[@]}; i++)); do
		global_curr_token+=" ${global_parse_arr[i]}"
	done
	global_curr_token="${global_curr_token# }"
	(( global_token_idx=${#global_parse_arr[@]}-1 ))
	global_last_token=1
}

token_get() {
	echo "${global_curr_token}"
}

token_get_stripped() {
	local str=$(token_get)
	str=${str//\'/}
	str=${str//\"/}
	str=${str//\`/}
	str=${str//\$/}
	echo "${str}"
}

is_last_token() {
	if [[ ${global_last_token} = 1 ]]; then
		return 0
	else
		return 1
	fi
}

print_error() {
	bm_arr+=("print ERROR: ${line} (${1}) at line ${line_no}")
}

confirm_token() {
	if [[ $(token_get) != "${1}" ]]; then
		print_error "expected '${1}', got '$(token_get)'"
		return 1
	fi
	return 0
}


token_proc_env() {
	local envname
	if is_last_token; then
		envname="${varname}"
	else
		token_next
		envname="$(token_get)"
	fi
	var_set "${varname}" "${!envname}"
}

token_proc_file() {
	local varval
	token_next
	local fname="$(token_get)"

	if [[ ! -r "${fname}" ]]; then
		print_error "${fname} not found"
		return
	fi

	if is_last_token; then
		read varval < "${fname}"
		var_set "${varname}" "${varval}"
		return
	fi

	token_next
	if ! confirm_token "using"; then
		return
	fi

	token_next
	read varval < <(sed -n "s/^$(token_get)//p" "${fname}")
	var_set "${varname}" "${varval}"
}

token_proc_date() {
	local varval
	token_next
	local dfmt="$(token_get_stripped)"
	if is_last_token; then
		varval=$(date ${dfmt})
		var_set "${varname}" "${varval}"
		return
	fi

	tokens_to_end
	if [[ $(configvar_get internal.date--date) = Y ]]; then
		varval=$(date ${dfmt} --date="$(token_get_stripped)")
		var_set "${varname}" "${varval}"
	else
		print_error "date --date not supported in this environment"
	fi
}

token_proc_first() {
	token_next
	token_proc_glob
}

token_proc_last() {
	global_match_first=0
	token_next
	token_proc_glob
}

token_proc_glob() {
	local s
	if ! confirm_token "glob"; then
		return
	fi
	token_next
	local txt=$(token_get)
	for s in ${txt// /?}; do
		if [[ ! -e ${s} ]]; then
			var_set "${varname}" "${txt}"
			return
		else
			if [[ ${global_match_first} = 1 ]]; then
				var_set "${varname}" "${s}"
				return
			fi
		fi
	done
	if [[ ${global_match_first} = 0 ]]; then
		var_set "${varname}" "${s}"
	fi
}


# ------------------------------------------------------------
# pre-process glob, set, read, show commands
# ------------------------------------------------------------
# set var=value
# read var from env
# read var from file /full/path/to/file
# read var from file /full/path/to/file using prefix_token
# read var from date +date_format
# read var from [first|last] glob /full/path/to/file
# show vars
preprocess_bookmark_file() {
	local mode="${1}"   # display|search|bma
	local fname="${2}"
	local txt line s varname tok line_no
	bm_arr=( )
	local curr_group=
	local bmgroup=$(get_bmloc_group)
	local cnt n i
	local str name

	init_vars

	[[ ! -r ${fname} ]] && return

	line_no=0
	while read -r line; do
		((line_no+=1))
		txt="${line}"

		if [[ ${mode} = display || ${mode} = bma ]]; then
			if [[ ${txt} = \=\=group\ * && ${curr_group} = "" ]]; then
				curr_group="${txt#==group }"
				bm_arr+=("${txt}")
				continue
			fi
			if [[ ${txt} = "==end-group ${curr_group}" ]]; then
                                if [[ "${bmgroup}" = "${curr_group}" ]]; then
					global_context_vars=("${var_arr[@]}")
                                fi
				bm_arr+=("${txt}")
				curr_group=""
				continue
			fi

			# only preprocess current group and global text
			if [[ ${curr_group} != "" ]]; then
				if [[ ${curr_group} != "${bmgroup}" ]]; then
					continue
				fi
			fi
		elif [[ ${mode} = search ]]; then
			# Variable scoping for each group block
			if [[ ${txt} = \=\=group\ * && ${curr_group} = "" ]]; then
				curr_group="${txt#==group }"
				save_arr=("${var_arr[@]}")
			fi
			if [[ ${txt} = "==end-group ${curr_group}" ]]; then
				curr_group=""
				var_arr=("${save_arr[@]}")
			fi
		fi

		# If string contain %{, substitute bookmark variables
		if [[ ${txt} = *%{* ]]; then
			str="${txt}"
			local var dest=
			while [[ ${str} = *%{* ]]; do
				dest+=${str%%\%\{*}
				var=${str#*\%\{}
				var=${var%%\}*}
				str=${str#*\%\{}
				str=${str#*\}}
				dest+=$(var_get ${var})
			done
			txt="${dest}${str}"
		fi
		if [[ ${txt} != /* ]]; then
			if [[ ${txt} = set\ * || ${txt} = read\ * || ${txt} = show\ * ]]; then
				if [[ ${mode} = search ]]; then
					bm_arr+=("${txt}")
				fi
				if [[ ${txt} = set\ * ]]; then
					txt="${txt#set }"
					local varname="${txt%%=*}"
					while [[ "${varname}" = *\  ]]; do
						varname="${varname%?}"
					done
					local value="${txt#*=}"
					var_set "${varname}" "${value}"
				elif [[ ${txt} = read\ * ]]; then
					token_init "${txt}"
					token_next
					local varname="$(token_get)"
					token_next
					if ! confirm_token "from"; then
						continue
					fi
					token_next
					tok="$(token_get)"
					case ${tok} in
						env)
							token_proc_env
							;;
						file)
							token_proc_file
							;;
						date)
							token_proc_date
							;;
						first)
							token_proc_first
							;;
						last)
							token_proc_last
							;;
						glob)
							token_proc_glob
							;;
					esac
				elif [[ ${txt} = show\ * ]]; then
					token_init "${txt}"
					token_next
					if confirm_token "vars"; then
						bm_arr+=("print show vars:")
						str="${var_arr[0]}:"
						str=${str#:}
						while [[ -n ${str} ]]; do
							name=${str%%=*}
							str=${str#*=}
							i=${str%%:*}
							bm_arr+=("print   ${name}=\"${var_arr[i]}\"")
							str=${str#*::}
						done
						bm_arr+=("print")
					fi
				fi
			else
				bm_arr+=("${txt}")
			fi

			# Assignment to special value "." used; output contents immediately
			if [[ -n ${global_line_output} ]]; then
				bm_arr+=("${global_line_output}")
				global_line_output=
			fi
		else
			for s in ${txt// /?}; do
				if [[ ! -e ${s} ]]; then
					bm_arr+=("${txt}")
				else
					bm_arr+=("${s}")
				fi
			done
		fi
	done <${fname}

        if [[ "${bmgroup}" = "" ]]; then
		global_context_vars=("${var_arr[@]}")
        fi
}



# ------------------------------------------------------------
# generate display list
# ------------------------------------------------------------
build_display_list() {
	local i s t txt
	local bmloc=$(get_bmloc_file)
	local bmgroup=$(get_bmloc_group)
	local t_arr=( )
	local bm_arr=( )
	local curr_group=

	# Add bmgroup path to group_arr
	s="${bmgroup}${bmgroup:+:}"
	while [[ "${s}" = *:* ]]; do
		s="${s%:*}"
		t_arr+=("${s}")
	done
	for((i=${#t_arr[@]}; i>=0; i--)); do
		group_arr+=("1:${t_arr[i]}")
	done

	preprocess_bookmark_file display "${bmloc}"

	for ((i=0; i<${#bm_arr[@]}; i++)); do
		txt="${bm_arr[i]}"

		# Group filtering
		if [[ ${txt} = \=\=group\ * ]]; then
			curr_group="${txt#==group }"
			# Add immediate sub-groups of bmgroup to group_arr
			if [[ "${curr_group}" = ${bmgroup}${bmgroup:+:}* && "${curr_group#${bmgroup}${bmgroup:+:}}" != *:* ]]; then
				group_arr+=("1:${curr_group}")
			fi
			continue
		fi
		[[ ${txt} = "==end-group ${curr_group}" ]] && curr_group="" && continue
		[[ "${curr_group}" != "${bmgroup}" ]] && continue

		# Special commands (rem, print, run, bmloc)
		[[ ${txt} = print || ${txt} = rem || ${txt} = head ]] && txt+=" "
		if [[ ${txt:-rem } = rem\ * ]]; then
			continue
		elif [[ ${txt} = print\ * || ${txt} = head\ * ]]; then
			[[ ${txt} = head\ * ]] && [[ ${#disp_arr[@]} -gt 0 ]] && disp_arr+=("")
			disp_arr+=("${txt#* }")
			continue
		elif [[ ${txt} = run\ * || ${txt} = bmloc\ * ]]; then
			pick_arr+=("${txt}")
			s=$(printf "%3d. %s" "${#pick_arr[@]}" "${txt}")
			disp_arr+=("${s}")
			continue
		elif [[ ${txt} != /* ]]; then
			# any unhandled commands
			disp_arr+=("Unknown directive at ${bmloc} line $((i+1)): \"${txt}\"")
			continue
		fi

		pick_arr+=("${txt}")
		[[   -d ${txt} ]] && txt="${txt%/}/"
		[[ ! -e ${txt} ]] && txt+="  (not found)"
		s=$(printf "%3d. %s" "${#pick_arr[@]}" "${txt}")
		disp_arr+=("${s}")
	done

	[[ ${#group_arr[@]} -eq 1 ]] && unset group_arr[0]
}


# ------------------------------------------------------------
# generate search result
# ------------------------------------------------------------
build_search_list() {
	local s item_prefix i txt
	local bmloc=$(get_top_bmloc_file)
	local done_list=""
	local file_list="${bmloc}!"
	local curr_group=

	while [[ -n ${file_list} ]]; do
		local root_group_match=0
		local match_cnt=0
		done_list+="${file_list%%!*}!"
		local grp_prefix="2:${file_list%%!*}#"
		local bm_arr=( )
		[[ ${file_list%%!*} = $(get_bmloc_file) ]] && grp_prefix="1:"
		item_prefix="[${grp_prefix#?:}] "
		[[ ${item_prefix} = "[] " ]] && item_prefix=""

		preprocess_bookmark_file search "${file_list%%!*}"

		for ((i=0; i<${#bm_arr[@]}; i++)); do
			txt="${bm_arr[i]}"

			if [[ ${txt} = \=\=group\ * ]]; then
				curr_group="${txt#==group }"
				if [[ ${txt} = *${item}* ]]; then
					((match_cnt+=1))
				fi
				item_prefix="[${grp_prefix#?:}${curr_group}] "
				continue
			elif [[ ${txt} = "==end-group ${curr_group}" ]]; then
				if (( match_cnt > 0 )); then
					group_arr+=("${grp_prefix}${curr_group}")
				fi
				match_cnt=0
				curr_group=""
				item_prefix="[${grp_prefix#?:}] "
				[[ ${item_prefix} = "[] " ]] && item_prefix=""
				continue
			fi

			if [[ ${txt} = /* ]]; then
				if [[ ${txt} = *${item}* ]]; then
					pick_arr+=("${txt}")
					[[   -d ${txt} ]] && txt="${txt%/}/"
					[[ ! -e ${txt} ]] && txt+="  (cannot access)"
					s=$(printf "%3d. %s%s" "${#pick_arr[@]}" "${item_prefix}" "${txt}")
					disp_arr+=("${s}")
					[[ -n ${curr_group} ]] && ((match_cnt+=1))
					[[ -z ${curr_group} ]] && ((root_group_match+=1))
				fi
			elif [[ ${txt} = run\ * || ${txt} = bmloc\ * ]]; then
				if [[ ${txt} = bmloc\ * && "!${done_list}" != *!${txt#bmloc }!* ]]; then
					file_list+="${txt#bmloc }!"
				fi
				if [[  "${txt}" = *${item}* ]]; then
					pick_arr+=("${txt}")
					s=$(printf "%3d. %s%s" "${#pick_arr[@]}" "${item_prefix}" "${txt}")
					disp_arr+=("${s}")
					[[ -n ${curr_group} ]] && ((match_cnt+=1))
					[[ -z ${curr_group} ]] && ((root_group_match+=1))
				fi
			else
				if [[  "${txt}" = *${item}* ]]; then
					s=$(printf "%s%s" "${item_prefix}" "${txt}")
					disp_arr+=("${s}")
					[[ -n ${curr_group} ]] && ((match_cnt+=1))
					[[ -z ${curr_group} ]] && ((root_group_match+=1))
				fi
			fi
		done
		if (( root_group_match > 0 )); then
			group_arr=( "${grp_prefix}" "${group_arr[@]}" )
		fi
		file_list="${file_list#*!}"
	done

	(( ${#pick_arr[@]} + ${#group_arr[@]} < 1 )) && disp_arr+=("  No match found for ${item}")
}


# ------------------------------------------------------------
# Sort group_arr
# ------------------------------------------------------------
sort_group_arr() {
	local i j s str
	for ((i=0; i<${#group_arr[@]}-1; i++)); do
		((s=i+1))
		for ((j=i+2; j<${#group_arr[@]}; j++)); do
			[[ ${group_arr[s]} > ${group_arr[j]} ]] && s=${j}
		done
		if [[ ${group_arr[i]} > ${group_arr[s]} ]]; then
			str=${group_arr[i]}
			group_arr[$i]=${group_arr[s]}
			group_arr[$s]=${str}         
		fi
	done

	# Strip off sort-order prefix (1: for current, 2: for different bookmark file)
	for ((i=0; i<${#group_arr[@]}; i++)); do
		group_arr[$i]="${group_arr[i]#?:}"
	done
}


# ------------------------------------------------------------
# Show display list / search result and prompt for action
# ------------------------------------------------------------
display_bookmarks() {
	local s t i
	local bmloc=$(get_bmloc_file)
	local bmgroup=$(get_bmloc_group)
	local prev_bmloc=$(get_previous_bmloc)

	{
	[[ ${mode} = normal ]] && bm_clear

	t="${bmloc}${bmgroup:+ (}${bmgroup}${bmgroup:+)}"
	s=""; while [[ ${#s} -lt ${#t} ]]; do
		s+="-"
	done
	echo "${s}"
	echo "${t}"
	echo "${s}"

	if (( ${#group_arr[@]} > 0 )); then
		for ((i=0; i<${#group_arr[@]}; i++)); do
			s="  "; [[ ${group_arr[i]} = ${bmgroup} ]] && s="()"
			printf "%3.3s. %sgroup=%s%s\n" "g$((i+1))" "${s%?}" "${group_arr[i]}" "${s#?}"
		done
		echo ""
	fi

	if (( ${#disp_arr[@]} > 0 )); then
		for ((i=0; i<${#disp_arr[@]}; i++)); do
			echo "${disp_arr[i]}"
		done
		echo ""
	fi

	# Return to previous bookmark file?
	if [[ -n ${prev_bmloc} ]]; then
		printf "%3d. Return to previous bookmark file %s\n" $((${#pick_arr[@]}+1)) "${prev_bmloc}"
		echo ""
	fi

	prompt "['help' for more info]\nItem:" item
	} <&10 >&11
}


# ------------------------------------------------------------
# Run external command
# ------------------------------------------------------------
run_command() {
	local k s="${1#run }"

	echo "------------------------------"
	echo "${s}"
	eval ${s}
	k=$?
	echo "------------------------------"
	echo "\$?=${k}"
}
get_enable_run_text() {
	echo
	echo "  Set config.enable_run to Y to enable run command"
	echo
}


# ------------------------------------------------------------
# Process Item response
# ------------------------------------------------------------
process_response() {
	local bmloc=$(get_bmloc_file)
	local s i j k
	local item_arr=( )

	# Split $item into item_arr[] expanding n-m notation (eg 1-10)
	set -- "${item}"
	for s in $*; do
		if [[ ${s} =~ ^[0-9]*-[0-9]*$ ]]; then
			j=${s%-*}
			k=${s#*-}
			if [[ ${j:-1} =~ [1-9][0-9]* && ${k:-1} =~ [1-9][0-9]* ]]; then
				for((i=${j:-1}; i<=${k:-${#pick_arr[@]}}; i++)); do
					item_arr+=("${i}")
				done
			fi
		# Expand var
		elif [[ ${s} =~ ^@.* ]]; then
			k=$(var_get ${s#@})
			while [[ "${k}" = *\ * ]]; do
				j="${k%% *}"
				[[ ${j} != @* ]] && item_arr+=("${j}")
				k="${k#* }"
			done
			[[ ${k} != @* ]] && item_arr+=("${k}")
		else
			item_arr+=("${s}")
		fi
	done

	# Process group, edit, config, root, raw, dir, help, search
	local raw_ind=${#item_arr[@]}
	local dir_ind=${#item_arr[@]}
	local num_item_arr=()
	for ((i=0; i<${#item_arr[@]}; i++)); do
		if [[ ${item_arr[i]} =~ ^g[0-9][0-9]*$ ]]; then
			((j=${item_arr[i]#g}-1))
			if (( j < ${#group_arr[@]} )); then
				if [[ ${group_arr[j]} = *\#* ]]; then
					push_bmloc  "${group_arr[j]%\#*}"
					set_bmloc_group "${group_arr[j]#*\#}"
				else
					set_bmloc_group "${group_arr[j]}"
				fi
				# Put rest of items back in params for processing
				param_item="${item_arr[@]:1}"
				return
			fi
		elif [[ ${item_arr[i]} = edit ]]; then
			bm_editor ${bmloc} <&10 >&11
			[[ ${interactive} = Y ]] && return
			exit 0
		elif [[ ${item_arr[i]} = config ]]; then
			prepare_config_file
			bm_editor ${global_bookmark_config} <&10 >&11
			read_config
			[[ ${interactive} = Y ]] && return
			exit 0
		elif [[ ${item_arr[i]} = root ]]; then
			set_BMLOC "$(get_top_bmloc_file)"
			param_item="${item_arr[@]:1}"
			return
		elif [[ ${item_arr[i]} = raw ]]; then
			raw_ind=${#num_item_arr[@]}
		elif [[ ${item_arr[i]} = dir ]]; then
			dir_ind=${#num_item_arr[@]}
		elif [[ ${item_arr[i]} = help ]]; then
			if [[ ${interactive} = Y ]]; then
				{
				bm_clear
				get_help_text
				} >&11
				wait_key
				return
			else
				get_help_text |sed -e "s/^/TEXT:/"
				exit 0
			fi
			return
		elif [[ ${item_arr[i]} = /*  ]]; then
			param_item="${item}"
			return
		elif [[ ${item_arr[i]} =~ [1-9][0-9]* ]]; then
			num_item_arr+=("${item_arr[i]}")
		elif [[ ! ${item_arr[i]} =~ [1-9][0-9]* ]]; then
			exit 0
		fi
	done

	if [[ ${#num_item_arr[@]} = 0 ]]; then
		exit 0
	fi

	# Process num_item_arr into files, dirs, runs, bmlocs
	local file_arr=()
	local run_arr=()
	local bmloc_arr=()
	local return_flag=N
	for((i=0; i<${#num_item_arr[@]}; i++)); do
		((j=${num_item_arr[i]}-1))

		# Set return flag
 		if [[ ${j} -eq ${#pick_arr[@]} && $(get_BMLOC) = *!* ]]; then
			return_flag=Y
			continue
		fi

		s="${pick_arr[j]}"

		# Empty, run, bmloc?
		if [[ -z ${s} ]]; then
			continue
		elif [[ ${s} = run\ * ]]; then
			run_arr+=("${s}")
			continue
		elif [[ ${s} = bmloc\ * ]]; then
			bmloc_arr+=("${s}")
			continue
		fi

		# Process files, dirs
		(( dir_ind <= i )) && s=${s%/*}
		if [[ ${global_stdoutdest} = tty ]]; then
			if [[ -f "${s}" ]]; then
				file_arr+=("${s}")
			elif [[ -d "${s}" ]]; then
				set_directory "${s}" 
			fi
		elif [[ ${global_stdoutdest} = notty ]]; then
			[[ -d "${s}" ]] && s="${s%/}/"
			if [[ -e "${s}" ]]; then
				(( raw_ind > i )) && s=$(to_collation_chars "${s}")
				global_out_file_arr+=("${s}")
			fi
		fi
	done

	# Run items
	if [[ ${#run_arr[@]} -gt 0 ]]; then
		if [[ ${global_stdoutdest} = tty ]]; then
			if [[ "${global_enable_run}" = Y ]]; then
				for((i=0; i<${#run_arr[@]}; i++)); do
					run_command "${run_arr[i]}" <&10 >&11
				done
			else
				get_enable_run_text >&11
			fi
			if [[ ${interactive} = Y ]]; then
				wait_key
			fi
		elif [[ ${global_stdoutdest} = notty ]]; then
			if [[ "${global_enable_run}" = Y ]]; then
				for((i=0; i<${#run_arr[@]}; i++)); do
					run_command "${run_arr[i]}"
				done
			else
				get_enable_run_text
			fi |sed -e "s/^/TEXT:/"
		fi
	fi

	# Use previous bmloc file?
	if [[ ${return_flag} = Y ]]; then
		pop_bmloc
 		return
	fi

	# View files
	if [[ ${global_stdoutdest} = tty && ${#file_arr[@]} -gt 0 ]]; then
		bm_editor "${file_arr[@]}" <&10 >&11
	fi

	# Use new bmloc (only process 1st one)
	if [[ ${#bmloc_arr[@]} -gt 0 ]]; then
		s="${bmloc_arr[0]}"
 		push_bmloc "${s#bmloc }"
		return
	fi

	# Continue to execute if viewed file or run a command
	if [[ $(( ${#file_arr[@]}+${#run_arr[@]} )) -gt 0 && ${interactive} = Y ]]; then
		return
	fi

	exit 0
}


# ------------------------------------------------------------
# bookmark display and processing
# ------------------------------------------------------------
s_bm() {
	local param_item="${@}"
	local interactive
	local item
	local mode
	local pick_arr
	local disp_arr
	local group_arr
	local save_arr
	local var_arr

	read_config
	touch_bmloc

	while true; do
		interactive=N
		mode=normal
		pick_arr=( )
		disp_arr=( )
		group_arr=( )

		item="${param_item}"
		param_item=

		[[ -z ${item} ]] && interactive=Y

		if [[ ${item} = /* ]]; then
			mode=search
			item=${item#/}
			interactive=Y
		fi

		[[ ${mode} = normal   ]] && build_display_list
		[[ ${mode} = search   ]] && build_search_list

		sort_group_arr

		[[ ${interactive} = Y ]] && display_bookmarks

		process_response
	done
}


# -------------------------------------------------------------
# Main
# -------------------------------------------------------------
global_stdoutdest="${1}"
shift
if [[ ${1} = add ]]; then
	shift
	if [[ ${1} = group && -n ${2} ]]; then
		shift
		bma_group "${1}"
	else
		bma_files "${@}"
	fi
else
	s_bm "${@}"
fi

